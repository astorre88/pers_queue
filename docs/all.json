{"shell":true,"revision":"","objects":[{"type":null,"source":"lib/mix/que.setup.ex:4","object_type":"ModuleObject","moduledoc":"Creates an Mnesia DB on disk for PersQueue.\n","module":"Elixir.Mix.Tasks.PersQueue.Setup","id":"Mix.Tasks.PersQueue.Setup"},{"type":null,"source":"lib/pers_queue.ex:4","object_type":"ModuleObject","moduledoc":"`PersQueue` is persistent queue with `Mnesia` backend.\n\n\n## Installation\n\n1) Add `pers_queue` to your deps:\n\n```elixir\ndef deps do\n  [\n    {:pers_queue, \"~> 0.0.1\"}\n  ]\nend\n```\n2) Add `pers_queue` to the list of application dependencies:\n\n```elixir\ndef application do\n  [applications: [:pers_queue]]\nend\n```\n\n\n## Persistent Setup\n\nPersQueue runs out of the box, but by default all messages are stored in-memory.\nTo persist messages across application restarts, run the following mix task:\n\n```bash\n$ mix pers_queue.setup\n```\n\nThis will create the Mnesia schema and message database for you.\n\n\n## Usage\n\n```elixir\n# Add message:\nPersQueue.add(\"consumer1\", \"a\")  # => :ok\nPersQueue.add(\"consumer1\", \"b\")  # => :ok\n\n# Get message:\nPersQueue.get(\"consumer1\")       # => %PersQueue.Message{connection: \"consumer1\", content: \"a\", id: 1}\nPersQueue.get(\"consumer1\")       # => %PersQueue.Message{connection: \"consumer1\", content: \"b\", id: 2}\n\n# Ack message by message id:\nPersQueue.ack(\"consumer1\", 1)    # => :ok\n\n# Reject message by message id:\nPersQueue.reject(\"consumer1\", 2) # => :ok\n```\n","module":"Elixir.PersQueue","id":"PersQueue"},{"type":null,"source":"lib/pers_queue/message.ex:4","object_type":"ModuleObject","moduledoc":"Module to manage a Message's state.\n\nDefines a `PersQueue.Message` struct.\n","module":"Elixir.PersQueue.Message","id":"PersQueue.Message"},{"type":null,"source":"lib/pers_queue/n_queue.ex:4","object_type":"ModuleObject","moduledoc":"Module to manage a queue.\n\nResponsible for adding, fetching, acknowledging and rejecting messages in queue.\nAlso keeps track of running messages.\n","module":"Elixir.PersQueue.NQueue","id":"PersQueue.NQueue"},{"type":null,"source":"lib/pers_queue/persistence.ex:4","object_type":"ModuleObject","moduledoc":"Mnesia adapter to persist `PersQueue.Messages`s\n","module":"Elixir.PersQueue.Persistence","id":"PersQueue.Persistence"},{"type":null,"source":"lib/pers_queue/persistence.ex:20","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.PersQueue.Persistence.DB","id":"PersQueue.Persistence.DB"},{"type":null,"source":"lib/pers_queue/persistence.ex:21","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.PersQueue.Persistence.DB.Messages","id":"PersQueue.Persistence.DB.Messages"},{"type":null,"source":"lib/pers_queue/server.ex:4","object_type":"ModuleObject","moduledoc":"`PersQueue.Server` is the `GenServer` responsible for processing all messages.\n","module":"Elixir.PersQueue.Server","id":"PersQueue.Server"},{"type":null,"source":"lib/pers_queue/server_supervisor.ex:4","object_type":"ModuleObject","moduledoc":"This Supervisor is responsible for spawning a `PersQueue.Server`\nfor each consumer.\n","module":"Elixir.PersQueue.ServerSupervisor","id":"PersQueue.ServerSupervisor"},{"type":null,"source":"lib/pers_queue/supervisor.ex:4","object_type":"ModuleObject","moduledoc":"This is the `Supervisor` responsible for overseeing the entire\n`PersQueue` application.\n","module":"Elixir.PersQueue.Supervisor","id":"PersQueue.Supervisor"},{"type":"def","source":"lib/mix/que.setup.ex:8","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"run","module_id":"Mix.Tasks.PersQueue.Setup","id":"run/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue.ex:96","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"ack","module_id":"PersQueue","id":"ack/2","doc":"Acks a message and deletes it from running list.\n\nAccepts the consumer name and message id.\n\n## Example\n\n```\nPersQueue.ack(\"consumer1\", 1) # => :ok\n```\n","arity":2},{"type":"def","source":"lib/pers_queue.ex:66","signature":[["consumer",[],null],["message_content",[],null]],"object_type":"FunctionObject","name":"add","module_id":"PersQueue","id":"add/2","doc":"Enqueues a message to persistent queue.\n\nAccepts the consumer name and message content.\n\n## Example\n\n```\nPersQueue.add(\"consumer1\", \"a\") # => :ok\n\nPersQueue.add(\"consumer2\", \"b\") # => :ok\n```\n","arity":2},{"type":"def","source":"lib/pers_queue.ex:82","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"get","module_id":"PersQueue","id":"get/1","doc":"Gets a message from persistent queue.\n\nAccepts the consumer name.\n\n## Example\n\n```\nPersQueue.get(\"consumer1\") # => %PersQueue.Message{connection: \"consumer1\", content: \"a\", id: 1}\n```\n","arity":1},{"type":"def","source":"lib/pers_queue.ex:110","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"reject","module_id":"PersQueue","id":"reject/2","doc":"Rejects a message and moves it to the end of persistent queue.\n\nAccepts the consumer name and message id.\n\n## Example\n\n```\nPersQueue.reject(\"consumer1\", 1) # => :ok\n```\n","arity":2},{"type":"def","source":"lib/pers_queue.ex:59","signature":[["type",[],"Elixir"],["args",[],"Elixir"]],"object_type":"FunctionObject","name":"start","module_id":"PersQueue","id":"start/2","doc":"Starts the PersQueue application\n","arity":2},{"type":"def","source":"lib/pers_queue.ex:2","signature":[["state",[],"Elixir"]],"object_type":"FunctionObject","name":"stop","module_id":"PersQueue","id":"stop/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/message.ex:12","signature":[["consumer",[],null],["content",[],null]],"object_type":"FunctionObject","name":"new","module_id":"PersQueue.Message","id":"new/2","doc":"Returns a new Message struct with defaults\n","arity":2},{"type":"def","source":"lib/pers_queue/n_queue.ex:46","signature":[["q",[],null],["id",[],null]],"object_type":"FunctionObject","name":"ack","module_id":"PersQueue.NQueue","id":"ack/2","doc":"Acknowledges the running message, removes it from running list and returns a queue.\n","arity":2},{"type":"def","source":"lib/pers_queue/n_queue.ex:25","signature":[["q",[],null],["message",[],null]],"object_type":"FunctionObject","name":"add","module_id":"PersQueue.NQueue","id":"add/2","doc":"Adds a message to the `queued` queue.\n","arity":2},{"type":"def","source":"lib/pers_queue/n_queue.ex:33","signature":[["q",[],null]],"object_type":"FunctionObject","name":"get","module_id":"PersQueue.NQueue","id":"get/1","doc":"Gets the next message in queue and returns a queue and message.\n","arity":1},{"type":"def","source":"lib/pers_queue/n_queue.ex:13","signature":[["consumer",[],null],["enqueued",[],null]],"object_type":"FunctionObject","name":"new","module_id":"PersQueue.NQueue","id":"new/2","doc":"Returns a new NQueue with defaults.\n","arity":2},{"type":"def","source":"lib/pers_queue/n_queue.ex:54","signature":[["q",[],null],["id",[],null]],"object_type":"FunctionObject","name":"reject","module_id":"PersQueue.NQueue","id":"reject/2","doc":"Rejects the running message, enqueues it in queued queue and returns a queue and message.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:96","signature":[["message_id",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"PersQueue.Persistence","id":"delete/1","doc":"Deletes a `PersQueue.Message` from the database.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:76","signature":[],"object_type":"FunctionObject","name":"enqueued","module_id":"PersQueue.Persistence","id":"enqueued/0","doc":"Returns enqueued `PersQueue.Message`s from the database.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:82","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"enqueued","module_id":"PersQueue.Persistence","id":"enqueued/1","doc":"Returns all enqueued `PersQueue.Message`s for the given consumer.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:88","signature":[["message",[],null]],"object_type":"FunctionObject","name":"insert","module_id":"PersQueue.Persistence","id":"insert/1","doc":"Inserts a `PersQueue.Message` into the database.\n\nReturns the same Message struct with the `id` value set\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:11","signature":[["\\\\",[],[["nodes",[],null],[["node",[["line",11]],[]]]]]],"object_type":"FunctionObject","name":"setup","module_id":"PersQueue.Persistence","id":"setup/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:72","signature":[],"object_type":"FunctionObject","name":"start","module_id":"PersQueue.Persistence","id":"start/0","doc":null,"arity":0},{"type":"defmacro","source":"lib/pers_queue/persistence.ex:20","signature":[["opts",[],"Elixir"]],"object_type":"FunctionObject","name":"__using__","module_id":"PersQueue.Persistence.DB","id":"__using__/1","doc":"Alias all the table names in the current scope and require what's\nneeded.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[["\\\\",[],[["copying",[],null],[]]]],"object_type":"FunctionObject","name":"create","module_id":"PersQueue.Persistence.DB","id":"create/1","doc":"Create the database, it calls `.create` on every defined table.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[["\\\\",[],[["copying",[],null],[]]]],"object_type":"FunctionObject","name":"create!","module_id":"PersQueue.Persistence.DB","id":"create!/1","doc":"Create the database, it calls `.create` on every defined table, raises\nin case of error.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[],"object_type":"FunctionObject","name":"destroy","module_id":"PersQueue.Persistence.DB","id":"destroy/0","doc":"Destroy the database, it calls `.destroy` on every defined table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[],"object_type":"FunctionObject","name":"destroy!","module_id":"PersQueue.Persistence.DB","id":"destroy!/0","doc":"Destroy the database, it calls `.destroy` on every defined table,\nraises in case of error.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[],"object_type":"FunctionObject","name":"metadata","module_id":"PersQueue.Persistence.DB","id":"metadata/0","doc":null,"arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[],"object_type":"FunctionObject","name":"tables","module_id":"PersQueue.Persistence.DB","id":"tables/0","doc":"List of atoms of the defined tables in the database.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:20","signature":[["\\\\",[],[["timeout",[],null],"infinity"]]],"object_type":"FunctionObject","name":"wait","module_id":"PersQueue.Persistence.DB","id":"wait/1","doc":"Wait for the database to be loaded.\n","arity":1},{"type":"defmacro","source":"lib/pers_queue/persistence.ex:21","signature":[["opts",[],"Elixir"]],"object_type":"FunctionObject","name":"__using__","module_id":"PersQueue.Persistence.DB.Messages","id":"__using__/1","doc":"Require the needed modules to use the table effectively.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["node",[],null],["\\\\",[],[["type",[],null],"disk"]]],"object_type":"FunctionObject","name":"add_copy","module_id":"PersQueue.Persistence.DB.Messages","id":"add_copy/2","doc":"Add a copy of the table on the given node with the given mode.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["attribute",[],null]],"object_type":"FunctionObject","name":"add_index","module_id":"PersQueue.Persistence.DB.Messages","id":"add_index/1","doc":"Add the index in the table for the given attribute.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["position",[],null]],"object_type":"FunctionObject","name":"at!","module_id":"PersQueue.Persistence.DB.Messages","id":"at!/1","doc":"Read a record based on a slot, see `mnesia:dirty_slot`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"attributes","module_id":"PersQueue.Persistence.DB.Messages","id":"attributes/0","doc":"The in order keyword list of attributes passed when the table was defined.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"bag?","module_id":"PersQueue.Persistence.DB.Messages","id":"bag?/0","doc":"Check if the table is a bag.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"clear","module_id":"PersQueue.Persistence.DB.Messages","id":"clear/0","doc":"Clear the content of the table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["list",[],null]],"object_type":"FunctionObject","name":"coerce","module_id":"PersQueue.Persistence.DB.Messages","id":"coerce/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["node",[],null],["to",[],null]],"object_type":"FunctionObject","name":"copying","module_id":"PersQueue.Persistence.DB.Messages","id":"copying/2","doc":"Change the copying mode of the table on the given node, see\n`mnesia:change_table_copy_type`.\n\n## Modes\n\n* `:disk` sets `:disc_copies` mode\n* `:disk!` sets `:disc_only_copies` mode\n* `:memory` sets `:ram_copies` mode\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"count","module_id":"PersQueue.Persistence.DB.Messages","id":"count/0","doc":"Get the number of records in the table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["copying",[],null],[]]]],"object_type":"FunctionObject","name":"create","module_id":"PersQueue.Persistence.DB.Messages","id":"create/1","doc":"Create the table with the given copying mode and inherent definition.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["copying",[],null],[]]]],"object_type":"FunctionObject","name":"create!","module_id":"PersQueue.Persistence.DB.Messages","id":"create!/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:40","signature":[["message",[],null]],"object_type":"FunctionObject","name":"create_message","module_id":"PersQueue.Persistence.DB.Messages","id":"create_message/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"database","module_id":"PersQueue.Persistence.DB.Messages","id":"database/0","doc":"Return the database the table belongs to.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"PersQueue.Persistence.DB.Messages","id":"delete/1","doc":"Delete the record or the given key from the table, see `mnesia:delete`\nand `mnesia:delete_object`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null],["lock",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"PersQueue.Persistence.DB.Messages","id":"delete/2","doc":"Delete the record or the given key from the table with the given lock,\nsee `mnesia:delete` and `mnesia:delete_object`.\n\n## Locks\n\n* `:write` sets a `:write` lock\n* `:write!` sets a `:sticky_write` lock\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"delete!","module_id":"PersQueue.Persistence.DB.Messages","id":"delete!/1","doc":"Delete the record or the given key from the table, see\n`mnesia:dirty_delete` and `mnesia:dirty_delete_object`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["node",[],null]],"object_type":"FunctionObject","name":"delete_copy","module_id":"PersQueue.Persistence.DB.Messages","id":"delete_copy/1","doc":"Delete a copy of the table from the given node.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["attribute",[],null]],"object_type":"FunctionObject","name":"delete_index","module_id":"PersQueue.Persistence.DB.Messages","id":"delete_index/1","doc":"Delete the index in the table for the given attribute.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:49","signature":[["message_id",[],null]],"object_type":"FunctionObject","name":"delete_message","module_id":"PersQueue.Persistence.DB.Messages","id":"delete_message/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"destroy","module_id":"PersQueue.Persistence.DB.Messages","id":"destroy/0","doc":"Destroy the table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"destroy!","module_id":"PersQueue.Persistence.DB.Messages","id":"destroy!/0","doc":"Destroy the table, raising if an error occurs.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:26","signature":[],"object_type":"FunctionObject","name":"enqueued_messages","module_id":"PersQueue.Persistence.DB.Messages","id":"enqueued_messages/0","doc":null,"arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:34","signature":[["name",[],null]],"object_type":"FunctionObject","name":"enqueued_messages","module_id":"PersQueue.Persistence.DB.Messages","id":"enqueued_messages/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["key",[],null],false]],["\\\\",[],[["lock",[],null],"read"]]],"object_type":"FunctionObject","name":"first","module_id":"PersQueue.Persistence.DB.Messages","id":"first/2","doc":"Return the first key or record in the table, see `mnesia:first`.\n\nBy default it returns the record, if you want only the key pass true as\nfirst parameter.\n\nIf the table is a bag, it will return a list of records.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["key",[],null],false]]],"object_type":"FunctionObject","name":"first!","module_id":"PersQueue.Persistence.DB.Messages","id":"first!/1","doc":"Return the first key or record in the table, see `mnesia:dirty_first`.\n\nBy default it returns the record, if you want only the key pass true as\nfirst parameter.\n\nIf the table is a bag, it will return a list of records.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["acc",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"foldl","module_id":"PersQueue.Persistence.DB.Messages","id":"foldl/2","doc":"Fold the whole table from the left, see `mnesia:foldl`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["acc",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"foldr","module_id":"PersQueue.Persistence.DB.Messages","id":"foldr/2","doc":"Fold the whole table from the right, see `mnesia:foldr`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"force","module_id":"PersQueue.Persistence.DB.Messages","id":"force/0","doc":"Force load the table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["_",[],"Elixir"],["_",[],"Elixir"]],"object_type":"FunctionObject","name":"hook_read","module_id":"PersQueue.Persistence.DB.Messages","id":"hook_read/2","doc":null,"arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["_",[],"Elixir"],["_",[],"Elixir"]],"object_type":"FunctionObject","name":"hook_read!","module_id":"PersQueue.Persistence.DB.Messages","id":"hook_read!/2","doc":null,"arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"hook_write","module_id":"PersQueue.Persistence.DB.Messages","id":"hook_write/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"hook_write!","module_id":"PersQueue.Persistence.DB.Messages","id":"hook_write!/1","doc":null,"arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"id","module_id":"PersQueue.Persistence.DB.Messages","id":"id/0","doc":"Get the name of the id key.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null]],"object_type":"FunctionObject","name":"info","module_id":"PersQueue.Persistence.DB.Messages","id":"info/1","doc":"Get information about the table, see `mnesia:table_info`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["messages",[],"Elixir"]],"object_type":"FunctionObject","name":"key","module_id":"PersQueue.Persistence.DB.Messages","id":"key/1","doc":"Return the key of the record.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"keys","module_id":"PersQueue.Persistence.DB.Messages","id":"keys/0","doc":"Return all the keys in the table, see `mnesia:all_keys`.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"keys!","module_id":"PersQueue.Persistence.DB.Messages","id":"keys!/0","doc":"Return all keys in the table, see `mnesia:dirty_all_keys`.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["key",[],null],false]],["\\\\",[],[["lock",[],null],"read"]]],"object_type":"FunctionObject","name":"last","module_id":"PersQueue.Persistence.DB.Messages","id":"last/2","doc":"Return the last key or record in the table, see `mnesia:last`.\n\nBy default it returns the record, if you want only the key pass true as\nfirst parameter.\n\nIf the table is a bag, it will return a list of records.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["key",[],null],false]]],"object_type":"FunctionObject","name":"last!","module_id":"PersQueue.Persistence.DB.Messages","id":"last!/1","doc":"Return the last key or record in the table, see `mnesia:dirty_last`.\n\nBy default it returns the record, if you want only the key pass true as\nfirst parameter.\n\nIf the table is a bag, it will return a list of records.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["mode",[],null]],"object_type":"FunctionObject","name":"lock","module_id":"PersQueue.Persistence.DB.Messages","id":"lock/1","doc":"Lock the table with the given lock.\n\n## Locks\n\n* `:write` sets a `:write` lock\n* `:write!` sets a `:sticky_write` lock\n* `:read` sets a `:read` lock\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["value",[],null]],"object_type":"FunctionObject","name":"majority","module_id":"PersQueue.Persistence.DB.Messages","id":"majority/1","doc":"Change the table majority.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["nodes",[],null]],"object_type":"FunctionObject","name":"master_nodes","module_id":"PersQueue.Persistence.DB.Messages","id":"master_nodes/1","doc":"Set master nodes for the table, see `mnesia:set_master_nodes`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["lock",[],null],"read"]],["pattern",[],null]],"object_type":"FunctionObject","name":"match","module_id":"PersQueue.Persistence.DB.Messages","id":"match/2","doc":"Select records in the table using simple don't care values, see\n`mnesia:match_object`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["pattern",[],null]],"object_type":"FunctionObject","name":"match!","module_id":"PersQueue.Persistence.DB.Messages","id":"match!/1","doc":"Select records in the table using simple don't care values, see\n`mnesia:dirty_match_object`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null]],"object_type":"FunctionObject","name":"member?","module_id":"PersQueue.Persistence.DB.Messages","id":"member?/1","doc":"Check if the key is present in the table.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["value",[],null]],"object_type":"FunctionObject","name":"mode","module_id":"PersQueue.Persistence.DB.Messages","id":"mode/1","doc":"Change the access of the table, see `mnesia:change_table_access_mode`.\n\n## Modes\n\n* `:both` sets read and write mode, it's the default.\n* `:read!` sets read-only mode.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["from",[],null],["to",[],null]],"object_type":"FunctionObject","name":"move_copy","module_id":"PersQueue.Persistence.DB.Messages","id":"move_copy/2","doc":"Move a copy of the table from the given node to another given node.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"next","module_id":"PersQueue.Persistence.DB.Messages","id":"next/1","doc":"Return the next key or record in the table, see `mnesia:next`.\n\nIf you're calling this function from an instance of the table (a record\nin it), it will get you the next record, if you're calling it directly\non the module it will treat the argument as key to start from and\nreturn you the next key.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"next!","module_id":"PersQueue.Persistence.DB.Messages","id":"next!/1","doc":"Return the next key or record in the table, see `mnesia:dirty_next`.\n\nIf you're calling this function from an instance of the table (a record\nin it), it will get you the next record, if you're calling it directly\non the module it will treat the argument as key to start from and\nreturn you the next key.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"options","module_id":"PersQueue.Persistence.DB.Messages","id":"options/0","doc":"The options passed when the table was defined.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"ordered_set?","module_id":"PersQueue.Persistence.DB.Messages","id":"ordered_set?/0","doc":"Check if the table is an ordered set.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"prev","module_id":"PersQueue.Persistence.DB.Messages","id":"prev/1","doc":"Return the previous key or record in the table, see `mnesia:prev`.\n\nIf you're calling this function from an instance of the table (a record\nin it), it will get you the previous record, if you're calling it\ndirectly on the module it will treat the argument as key to start from\nand return you the previous key.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"prev!","module_id":"PersQueue.Persistence.DB.Messages","id":"prev!/1","doc":"Return the previous key or record in the table, see `mnesia:dirty_prev`.\n\nIf you're calling this function from an instance of the table (a record\nin it), it will get you the previous record, if you're calling it\ndirectly on the module it will treat the argument as key to start from\nand return you the previous key.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["value",[],null]],"object_type":"FunctionObject","name":"priority","module_id":"PersQueue.Persistence.DB.Messages","id":"priority/1","doc":"Change the table loading priority.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"properties","module_id":"PersQueue.Persistence.DB.Messages","id":"properties/0","doc":"Return properties of the table.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null],["\\\\",[],[["lock",[],null],"read"]]],"object_type":"FunctionObject","name":"read","module_id":"PersQueue.Persistence.DB.Messages","id":"read/2","doc":"Read a record from the table with the given lock, see `mnesia:read`.\n\nUnlike `mnesia:read` this returns either the record or nil.\n\n## Locks\n\n* `:write` sets a `:write` lock\n* `:write!` sets a `:sticky_write` lock\n* `:read` sets a `:read` lock\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null]],"object_type":"FunctionObject","name":"read!","module_id":"PersQueue.Persistence.DB.Messages","id":"read!/1","doc":"Read a record from the table, see `mnesia:dirty_read`.\n\nUnlike `mnesia:dirty_read` this returns either the record or nil.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null],["position",[],null]],"object_type":"FunctionObject","name":"read_at","module_id":"PersQueue.Persistence.DB.Messages","id":"read_at/2","doc":"Read records from the table based on a secondary index given as position,\nsee `mnesia:index_read`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["key",[],null],["position",[],null]],"object_type":"FunctionObject","name":"read_at!","module_id":"PersQueue.Persistence.DB.Messages","id":"read_at!/2","doc":"Read records from the table based on a secondary index given as position,\nsee `mnesia:dirty_index_read`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["spec",[],null]],"object_type":"FunctionObject","name":"select","module_id":"PersQueue.Persistence.DB.Messages","id":"select/1","doc":"Select records in the table using a match_spec, see `mnesia:select`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["lock_or_limit",[],null],["spec",[],null]],"object_type":"FunctionObject","name":"select","module_id":"PersQueue.Persistence.DB.Messages","id":"select/2","doc":"Select records in the given table using a match_spec passing a limit or a\nlock kind, see `mnesia:select`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["lock_or_limit",[],null],["limit_or_lock",[],null],["spec",[],null]],"object_type":"FunctionObject","name":"select","module_id":"PersQueue.Persistence.DB.Messages","id":"select/3","doc":"Select records in the given table using a match_spec passing a limit and a\nlock kind, see `mnesia:select`.\n","arity":3},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["spec",[],null]],"object_type":"FunctionObject","name":"select!","module_id":"PersQueue.Persistence.DB.Messages","id":"select!/1","doc":"Select records in the table using a match_spec, see\n`mnesia:dirty_select`.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"set?","module_id":"PersQueue.Persistence.DB.Messages","id":"set?/0","doc":"Check if the table is a set.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["lock",[],null],"read"]]],"object_type":"FunctionObject","name":"stream","module_id":"PersQueue.Persistence.DB.Messages","id":"stream/1","doc":"Return an iterator to use with Enum functions.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[],"object_type":"FunctionObject","name":"stream!","module_id":"PersQueue.Persistence.DB.Messages","id":"stream!/0","doc":"Return an iterator to use with the Enum functions using dirty\noperations to retrieve information.\n","arity":0},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"type","module_id":"PersQueue.Persistence.DB.Messages","id":"type/1","doc":"Return the type of the table.\n","arity":1},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["\\\\",[],[["timeout",[],null],"infinity"]]],"object_type":"FunctionObject","name":"wait","module_id":"PersQueue.Persistence.DB.Messages","id":"wait/1","doc":"Wait for the table optionally with a timeout.\n","arity":1},{"type":"defmacro","source":"lib/pers_queue/persistence.ex:21","signature":[["spec",[],null],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"where","module_id":"PersQueue.Persistence.DB.Messages","id":"where/2","doc":"Select records in the table using an Exquisite query, see\n`Exquisite.match/2` and `mnesia:select`.\n\n## Options\n\n  * `limit` - sets the count of elements to select in every continuation\n  * `lock` - sets the kind of lock to use\n  * `select` - Exquisite selector spec\n  * `qualified` - whether to set a name for the record or not\n\n","arity":2},{"type":"defmacro","source":"lib/pers_queue/persistence.ex:21","signature":[["spec",[],null],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"where!","module_id":"PersQueue.Persistence.DB.Messages","id":"where!/2","doc":"Select records in the table using an Exquisite query, see\n`Exquisite.match/2` and `mnesia:dirty_select`.\n\n## Options\n\n  * `select` - Exquisite selector spec\n  * `qualified` - whether to set a name for the record or not\n\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null],["\\\\",[],[["lock",[],null],"write"]]],"object_type":"FunctionObject","name":"write","module_id":"PersQueue.Persistence.DB.Messages","id":"write/2","doc":"Write the record to the table, see `mnesia:write`.\n\nMissing fields tagged as autoincrement will be incremented with the\ncounter if `nil`.\n","arity":2},{"type":"def","source":"lib/pers_queue/persistence.ex:21","signature":[["self",[],null]],"object_type":"FunctionObject","name":"write!","module_id":"PersQueue.Persistence.DB.Messages","id":"write!/1","doc":"Write the record to the table, see `mnesia:dirty_write`.\n\nMissing fields tagged as autoincrement will be incremented with the\ncounter if `nil`.\n","arity":1},{"type":"def","source":"lib/pers_queue/server.ex:34","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"ack","module_id":"PersQueue.Server","id":"ack/2","doc":"Acks the message.\n","arity":2},{"type":"def","source":"lib/pers_queue/server.ex:18","signature":[["consumer",[],null],["message_content",[],null]],"object_type":"FunctionObject","name":"add","module_id":"PersQueue.Server","id":"add/2","doc":"Creates a new message with the passed content.\n","arity":2},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"PersQueue.Server","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"PersQueue.Server","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/pers_queue/server.ex:113","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"exists?","module_id":"PersQueue.Server","id":"exists?/1","doc":"Checks if the associated with consumer process exists.\n","arity":1},{"type":"def","source":"lib/pers_queue/server.ex:26","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"get","module_id":"PersQueue.Server","id":"get/1","doc":"Gets the message from the head of the queue.\n","arity":1},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"PersQueue.Server","id":"handle_call/3","doc":"Removes the message from the running list and enqueues it to the queue.\n","arity":3},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"PersQueue.Server","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"PersQueue.Server","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/pers_queue/server.ex:52","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"init","module_id":"PersQueue.Server","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/server.ex:42","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"reject","module_id":"PersQueue.Server","id":"reject/2","doc":"Rejects the message.\n","arity":2},{"type":"def","source":"lib/pers_queue/server.ex:10","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"start_link","module_id":"PersQueue.Server","id":"start_link/1","doc":"Starts the message Server\n","arity":1},{"type":"def","source":"lib/pers_queue/server.ex:2","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"PersQueue.Server","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:49","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"ack","module_id":"PersQueue.ServerSupervisor","id":"ack/2","doc":"Resends ack task to server.\n","arity":2},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:27","signature":[["consumer",[],null],["message_content",[],null]],"object_type":"FunctionObject","name":"add","module_id":"PersQueue.ServerSupervisor","id":"add/2","doc":"Resends add task to server.\nIf the server for the consumer is running, add message to it.\nIf not, spawn a new server first and then add it.\n","arity":2},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"PersQueue.ServerSupervisor","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:41","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"get","module_id":"PersQueue.ServerSupervisor","id":"get/1","doc":"Resends get task to server.\n","arity":1},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"init","module_id":"PersQueue.ServerSupervisor","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:57","signature":[["consumer",[],null],["message_id",[],null]],"object_type":"FunctionObject","name":"reject","module_id":"PersQueue.ServerSupervisor","id":"reject/2","doc":"Resends reject task to server.\n","arity":2},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:9","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"PersQueue.ServerSupervisor","id":"start_link/0","doc":"Starts the supervision tree\n","arity":0},{"type":"def","source":"lib/pers_queue/server_supervisor.ex:19","signature":[["consumer",[],null]],"object_type":"FunctionObject","name":"start_server","module_id":"PersQueue.ServerSupervisor","id":"start_server/1","doc":"Starts a `PersQueue.Server` for the given consumer\n","arity":1},{"type":"def","source":"lib/pers_queue/supervisor.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"PersQueue.Supervisor","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/supervisor.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"init","module_id":"PersQueue.Supervisor","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/pers_queue/supervisor.ex:9","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"PersQueue.Supervisor","id":"start_link/0","doc":"Starts the supervision tree for `PersQueue`\n","arity":0}],"language":"elixir","git_repo_url":"origin","client_version":"0.5.6","client_name":"inch_ex","branch_name":"","args":[]}